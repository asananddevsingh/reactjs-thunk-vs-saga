{"version":3,"sources":["App.js","serviceWorker.js","store/thunk/thunkReducer.js","store/saga/sagaReducer.js","store/index.js","store/saga/sagaActions.js","store/saga/index.js","index.js"],"names":["connect","state","thunkCounter","thunk","counter","sagaCounter","saga","dispatch","thunkIncrement","type","sagaIncrement","prevCount","sagaChange","val","props","className","onClick","onChange","event","console","log","target","value","Boolean","window","location","hostname","match","initialState","thunkReducer","action","sagaReducer","rootReducer","combineReducers","onSagaIncrement","onSagaChange","takeLatest","call","getUserAccount","response","put","timeout","axios","get","data","then","catch","error","rootSaga","all","sagaMiddleware","createSagaMiddleware","middlewares","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8d4aa555.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\n\nconst App = (props) => {\n  const thunkIncrement = () => {\n    props.thunkIncrement();\n  };\n\n  const sagaIncrement = () => {\n    props.sagaIncrement(props.sagaCounter);\n  };\n\n  const sagaChange = (event) => {\n    console.log(event.target.value);\n    props.sagaChange(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux-Thunk Vs Redux-Saga</h1>\n      <hr />\n      <div>thunk - {props.thunkCounter}</div>\n      <div>saga - {props.sagaCounter}</div>\n      <button onClick={thunkIncrement}>Thunk Increment</button>\n      <button onClick={sagaIncrement}>Saga Increment</button>\n      <select onChange={sagaChange}>\n        <option value=\"1\">One</option>\n        <option value=\"2\">Two</option>\n        <option value=\"3\">Three</option>\n        <option value=\"4\">Four</option>\n      </select>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    thunkCounter: state && state.thunk && state.thunk.counter,\n    sagaCounter: state && state.saga && state.saga.counter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    thunkIncrement: () => dispatch({ type: \"THUNK_INCREMENT\" }),\n    sagaIncrement: (prevCount) =>\n      dispatch({ type: \"SAGA_INCREMENT\", prevCount }),\n    sagaChange: (val) => dispatch({ type: \"SAGA_CHANGE\", val }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  counter: 0,\r\n};\r\n\r\nconst thunkReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"THUNK_INCREMENT\":\r\n      return {\r\n        ...state,\r\n        counter: state.counter + 1,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default thunkReducer;\r\n","const initialState = {\r\n  counter: 0,\r\n};\r\n\r\nconst sagaReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SAGA_INCREMENT_RESPONSE\":\r\n      return {\r\n        ...state,\r\n        counter: state.counter + 1,\r\n        prevCount: action.prevCount,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default sagaReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport thunkReducer from \"./thunk/thunkReducer\";\r\nimport sagaReducer from \"./saga/sagaReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  thunk: thunkReducer,\r\n  saga: sagaReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { put, takeEvery, takeLatest, call, delay } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nexport function* sagaIncrement() {\r\n  yield takeLatest(\"SAGA_INCREMENT\", onSagaIncrement);\r\n}\r\n\r\nfunction* onSagaIncrement(action) {\r\n  // yield delay(1000);\r\n  const response = yield call(() => {\r\n    return getUserAccount();\r\n  });\r\n\r\n  console.log(\"response: \", response);\r\n  yield put({ type: \"SAGA_INCREMENT_RESPONSE\" });\r\n}\r\n\r\nexport function* sagaChange() {\r\n  yield takeLatest(\"SAGA_CHANGE\", onSagaChange);\r\n}\r\n\r\nfunction* onSagaChange(action) {\r\n  let timeout = 1000;\r\n  if (action && action.val === \"3\") {\r\n    timeout = 5000;\r\n  }\r\n  const response = yield call(getUserAccount);\r\n  console.log(\"Change Response: \", response);\r\n}\r\n\r\nconst getUserAccount = (timeout = 1000, val = 0) => {\r\n  return axios\r\n    .get(\r\n      `http://www.mocky.io/v2/5ecaf2c53000009300ddd465?mocky-delay=${timeout}ms`,\r\n      { data: val }\r\n    )\r\n    .then(function (response) {\r\n      // console.log(response);\r\n      return response;\r\n    })\r\n    .catch(function (error) {\r\n      // console.log(error);\r\n      return error;\r\n    });\r\n};\r\n","import { all } from \"redux-saga/effects\";\r\nimport { sagaIncrement, sagaChange } from \"./sagaActions\";\r\n\r\nfunction* rootSaga() {\r\n  yield all([sagaIncrement(), sagaChange()]);\r\n}\r\n\r\nexport default rootSaga;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\n\nimport rootReducer from \"./store\";\nimport rootSaga from \"./store/saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [thunk, sagaMiddleware];\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancer(applyMiddleware(...middlewares))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}